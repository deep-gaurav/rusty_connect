type BatteryConfig {
  enabled: Boolean!
  sendEnabled: Boolean!
}

enum BatteryEventType {
  NONE
  BATTERY_LOW
  UNKNOWN
}

type BatteryPayload {
  currentCharge: Float!
  isCharging: Boolean!
  thresholdEvent: BatteryEventType!
}

type BatteryState {
  lastStatus: BatteryPayload
  lastSentStatus: BatteryPayload
}

type Batttery {
  sendBatery(
    currentCharge: Float!
    isCharging: Boolean!
    deviceId: String
  ): String!
}

type Clipboard {
  sendClipboard(deviceId: String, content: String!): String!
}

type ClipboardConfig {
  enabled: Boolean!
  sendEnabled: Boolean!
}

type ClipboardPayload {
  content: String!
}

type ClipboardState {
  enabled: Boolean!
}

type Completed {
  totalBytes: Int!
  path: String!
}

type Connected {
  id: String!
}

type Device {
  id: String!
  identity: IdentityPayloadBody!
  paired: Boolean!
  pluginConfigs: PluginConfigs!
  pluginStates: PluginStates!
}

type DeviceWithState {
  device: Device!
  isConnected: Boolean!
}

type Disconnected {
  id: String!
}

type DownloadFailed {
  reason: String!
}

union DownloadProgress = NotStarted | Progress | Completed | DownloadFailed

type IdentityPayloadBody {
  deviceName: String!
  deviceId: String!
  deviceType: String!
  incomingCapabilities: [String!]!
  outgoingCapabilities: [String!]!
  protocolVersion: Int!
  tcpPort: Int
}

# A scalar that can represent any JSON value.
scalar JSON

type Mutation {
  plugins: PluginManager!
  broadcastIdentityUdp: IdentityPayloadBody!
  pair(id: String!, pair: Boolean!): DeviceWithState!
}

type NotStarted {
  totalBytes: Int!
}

type Notification {
  sendNotification: String!
}

type NotificationConfig {
  enabled: Boolean!
}

type NotificationPayload {
  id: String!
  appName: String
  ticker: String
  isClearable: Boolean
  isCancel: Boolean
  title: String
  text: String
  requestReplyId: String
  silent: Boolean
  payloadHash: String
  iconPath: String
}

type NotificationState {
  enabled: Boolean!
}

type PairPayloadBody {
  pair: Boolean!
}

type Payload {
  id: String!
  type: String!
  body: JSON!
}

type Ping {
  sendPing(deviceId: String): String!
}

type PingConfig {
  enabled: Boolean!
  sendEnabled: Boolean!
}

type PingPayload {
  message: String
}

type PingState {
  enabled: Boolean!
}

type PluginConfigs {
  ping: PingConfig
  clipboard: ClipboardConfig
  batttery: BatteryConfig
  notification: NotificationConfig
  share: ShareConfig
}

type PluginManager {
  ping: Ping!
  clipboard: Clipboard!
  batttery: Batttery!
  notification: Notification!
  share: Share!
}

type PluginStates {
  ping: PingState!
  clipboard: ClipboardState!
  batttery: BatteryState!
  notification: NotificationState!
  share: ShareState!
}

type Progress {
  totalBytes: Int!
  readBytes: Int!
}

type Query {
  howdy: String!
  devices: [DeviceWithState!]!
  device(id: String!): DeviceWithState!
}

type ReceivedMessage {
  deviceId: String!
  payload: ReceivedPayload!
}

union ReceivedPayload =
    Connected
  | Disconnected
  | IdentityPayloadBody
  | PairPayloadBody
  | PingPayload
  | ClipboardPayload
  | BatteryPayload
  | NotificationPayload
  | SharePayload
  | Payload

type Share {
  sendFile: String!
}

type ShareConfig {
  enabled: Boolean!
}

type SharePayload {
  text: String
  filename: String
  lastModified: Int
  numberOfFiles: Int
  totalPayloadSize: Int
  downloadId: String
}

type ShareState {
  enabled: Boolean!
}

type Subscription {
  payloads: ReceivedMessage!
  downloadUpdate(downloadId: String!): DownloadProgress!
}
